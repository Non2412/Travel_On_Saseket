// screens/home_screen.dart
import 'package:flutter/material.dart';
import '../widgets/category_button.dart';
import '../widgets/event_card.dart';
import '../widgets/place_card.dart';

class HomeScreen extends StatelessWidget {
  final List<Map<String, dynamic>> categories = [
    {'icon': 'üèõÔ∏è', 'name': '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', 'count': 15},
    {'icon': 'üåø', 'name': '‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥', 'count': 23},
    {'icon': 'üèõÔ∏è', 'name': '‡∏ß‡∏±‡∏î', 'count': 18},
    {'icon': 'üçú', 'name': '‡∏≠‡∏≤‡∏´‡∏≤‡∏£', 'count': 45},
    {'icon': 'üõçÔ∏è', 'name': '‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á', 'count': 12},
    {'icon': 'üé≠', 'name': '‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°', 'count': 8},
  ];

  final List<Map<String, dynamic>> events = [
    {
      'title': '‡∏á‡∏≤‡∏ô‡∏ö‡∏∏‡∏ç‡∏ö‡∏±‡πâ‡∏á‡πÑ‡∏ü‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©',
      'date': '15-17 ‡∏°‡∏µ.‡∏Ñ.',
      'location': '‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©'
    },
    {
      'title': '‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏î‡∏≠‡∏Å‡∏Ñ‡∏π‡∏ì',
      'date': '20-22 ‡πÄ‡∏°.‡∏¢.',
      'location': '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏Å‡∏±‡∏ô‡∏ó‡∏£‡∏•‡∏±‡∏Å‡∏©‡πå'
    },
  ];

  final List<Map<String, dynamic>> places = [
    {
      'name': '‡∏õ‡∏£‡∏≤‡∏™‡∏≤‡∏ó‡πÄ‡∏Ç‡∏≤‡∏û‡∏ô‡∏°‡∏£‡∏∏‡πâ‡∏á',
      'rating': 4.8,
      'distance': '2.5 km',
      'price': '‡∏ü‡∏£‡∏µ'
    },
    {
      'name': '‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏Ç‡∏≤‡∏û‡∏£‡∏∞‡∏ß‡∏¥‡∏´‡∏≤‡∏£',
      'rating': 4.6,
      'distance': '15 km',
      'price': '‡∏ø40'
    },
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[50],
      body: SafeArea(
        child: SingleChildScrollView(
          child: Column(
            children: [
              _buildHeader(context),
              _buildContent(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildHeader(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.orange[500]!, Colors.red[500]!],
          begin: Alignment.topLeft,
          end: Alignment.topRight,
        ),
      ),
      padding: const EdgeInsets.all(24),
      child: Column(
        children: [
          _buildTopRow(),
          const SizedBox(height: 20),
          _buildSearchBar(),
        ],
      ),
    );
  }

  Widget _buildTopRow() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Row(
          children: [
            const Icon(Icons.menu, color: Colors.white),
            const SizedBox(width: 12),
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! üëã',
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                Text(
                  '‡∏°‡∏≤‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©‡∏Å‡∏±‡∏ô',
                  style: TextStyle(
                    color: Colors.white.withOpacity(0.8),
                  ),
                ),
              ],
            ),
          ],
        ),
        Row(
          children: [
            const Icon(Icons.notifications, color: Colors.white),
            const SizedBox(width: 12),
            CircleAvatar(
              backgroundColor: Colors.white.withOpacity(0.2),
              child: const Icon(Icons.person, color: Colors.white),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildSearchBar() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
      ),
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
      child: Row(
        children: [
          Icon(Icons.search, color: Colors.grey[600]),
          const SizedBox(width: 12),
          Expanded(
            child: Text(
              '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß...',
              style: TextStyle(color: Colors.grey[600]),
            ),
          ),
          Icon(Icons.camera_alt, color: Colors.orange[500]),
        ],
      ),
    );
  }

  Widget _buildContent() {
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildCategoriesSection(),
          const SizedBox(height: 24),
          _buildEventsSection(),
          const SizedBox(height: 24),
          _buildPlacesSection(),
        ],
      ),
    );
  }

  Widget _buildCategoriesSection() {
    return _buildSection(
      '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà',
      GridView.builder(
        shrinkWrap: true,
        physics: const NeverScrollableScrollPhysics(),
        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 3,
          crossAxisSpacing: 12,
          mainAxisSpacing: 12,
        ),
        itemCount: categories.length,
        itemBuilder: (context, index) {
          final category = categories[index];
          return CategoryButton(
            icon: category['icon'],
            name: category['name'],
            count: category['count'],
          );
        },
      ),
    );
  }

  Widget _buildEventsSection() {
    return _buildSection(
      '‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°',
      Column(
        children: events.map((event) => EventCard(
          title: event['title'],
          date: event['date'],
          location: event['location'],
        )).toList(),
      ),
    );
  }

  Widget _buildPlacesSection() {
    return _buildSection(
      '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥',
      Column(
        children: places.map((place) => PlaceCard(
          name: place['name'],
          rating: place['rating'],
          distance: place['distance'],
          price: place['price'],
        )).toList(),
      ),
    );
  }

  Widget _buildSection(String title, Widget content) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              title,
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Colors.grey[800],
              ),
            ),
            Text(
              '‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
              style: TextStyle(
                color: Colors.orange[500],
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        content,
      ],
    );
  }
}